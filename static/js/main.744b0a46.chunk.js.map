{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.module.css","components/Statistics/Statistics.module.css","components/Section/Section.module.css","components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","components/Section/Section.js","components/NotificationMessage/NotificationMessage .js","App.js","index.js"],"names":["module","exports","FeedbackOptions","options","onLeaveFeedback","buttonsSet","map","e","className","s","btn","onClick","button","toLowerCase","payload","Stats","good","neutral","bad","total","positiveFeedback","list","Section","title","children","section","NotificationMessage","message","App","useReducer","state","action","dispatch","feedBakBtnOptions","Object","keys","positiveFeedbackPercentage","Math","round","countTotalFeedback","totalFeedbackCount","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+IACAA,EAAOC,QAAU,CAAC,IAAM,+B,gBCAxBD,EAAOC,QAAU,CAAC,KAAO,2B,gBCAzBD,EAAOC,QAAU,CAAC,QAAU,2B,8KCwBbC,MArBf,YAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAC5BC,EAAaF,EAAQG,KAAI,SAACC,GAAD,OAC7B,wBACEC,UAAWC,IAAEC,IACbC,QAAS,WACPP,EAAgB,CAAEQ,OAAQL,EAAEM,cAAeC,QAAS,KAHxD,SAOGP,GAFIA,MAMT,OAAO,8BAAMF,K,gBCMAU,MApBf,YAAiE,IAAhDC,EAA+C,EAA/CA,KAAMC,EAAyC,EAAzCA,QAASC,EAAgC,EAAhCA,IAAKC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,iBAC1C,OACE,qBAAIZ,UAAWC,IAAEY,KAAjB,UACE,wCAAWL,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,+DAA2BC,EAA3B,Y,gBCOSE,MAdf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,0BAAShB,UAAWC,IAAEgB,QAAtB,UACE,6BAAKF,IACJC,MCGQE,MARf,YAA2C,IAAZC,EAAW,EAAXA,QAC7B,OAAO,4BAAIA,KC4DEC,MAxDf,WACE,MAA0BC,sBAc1B,SAAqBC,EAAOC,GAC1B,IAAQnB,EAAoBmB,EAApBnB,OAAQE,EAAYiB,EAAZjB,QAChB,OAAO,2BACFgB,GADL,kBAEGlB,EAASkB,EAAMlB,GAAUE,MAlBoB,CAChDE,KAAM,EACNC,QAAS,EACTC,IAAK,IAHP,mBAAOY,EAAP,KAAcE,EAAd,KASQhB,EAAuBc,EAAvBd,KAAMC,EAAiBa,EAAjBb,QAASC,EAAQY,EAARZ,IACjBe,EAAoBC,OAAOC,KAAKL,GAChCM,EAYGC,KAAKC,MAAO,IAAMtB,EAAQuB,KAX7BC,EAAqBD,IAc3B,SAASA,IACP,OAAOvB,EAAOC,EAAUC,EAG1B,OACE,qCACE,cAAC,EAAD,CAASK,MA1BS,wBA0BlB,SACE,cAAC,EAAD,CACEpB,QAAS8B,EACT7B,gBAAiB4B,MAGrB,cAAC,EAAD,CAAST,MA/BW,aA+BpB,SACGiB,EACC,cAAC,EAAD,CACExB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOqB,EACPpB,iBAAkBgB,IAGpB,cAAC,EAAD,CAAqBT,QAxCF,+BCX7Bc,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.744b0a46.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"FeedbackOptions_btn__1pkn0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Statistics_list__2T8-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__1T3kO\"};","import PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport s from \"./FeedbackOptions.module.css\";\r\n\r\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\r\n  const buttonsSet = options.map((e) => (\r\n    <button\r\n      className={s.btn}\r\n      onClick={() => {\r\n        onLeaveFeedback({ button: e.toLowerCase(), payload: 1 });\r\n      }}\r\n      key={e}\r\n    >\r\n      {e}\r\n    </button>\r\n  ));\r\n\r\n  return <div>{buttonsSet}</div>;\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import PropTypes from \"prop-types\";\r\nimport s from \"./Statistics.module.css\";\r\n\r\nfunction Stats({ good, neutral, bad, total, positiveFeedback }) {\r\n  return (\r\n    <ul className={s.list}>\r\n      <li>Good: {good}</li>\r\n      <li>Neutral: {neutral}</li>\r\n      <li>Bad: {bad}</li>\r\n      <li>Total: {total}</li>\r\n      <li>Positive Feedback: {`${positiveFeedback}%`}</li>\r\n    </ul>\r\n  );\r\n}\r\n\r\nStats.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positiveFeedback: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Stats;\r\n","import PropTypes from \"prop-types\";\r\nimport s from \"./Section.module.css\";\r\n\r\nfunction Section({ title, children }) {\r\n  return (\r\n    <section className={s.section}>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Section;\r\n","import PropTypes from \"prop-types\";\r\n\r\nfunction NotificationMessage({ message }) {\r\n  return <p>{message}</p>;\r\n}\r\n\r\nNotificationMessage.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default NotificationMessage;\r\n","import React, { useReducer } from \"react\";\r\nimport \"./App.css\";\r\nimport FeedbackOptions from \"./components/FeedbackOptions\";\r\nimport Stats from \"./components/Statistics\";\r\nimport Section from \"./components/Section\";\r\nimport NotificationMessage from \"./components/NotificationMessage\";\r\n\r\nfunction App() {\r\n  const [state, dispatch] = useReducer(addFeedback, {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  });\r\n\r\n  const feedbackTitle = \"Please leave feedback\";\r\n  const statisticsTitle = \"Statistics\";\r\n  const onEmptyFeedbackMsg = \"There is no feedback\";\r\n  const { good, neutral, bad } = state;\r\n  const feedBakBtnOptions = Object.keys(state);\r\n  const positiveFeedbackPercentage = countPositiveFeedbackPercentage();\r\n  const totalFeedbackCount = countTotalFeedback();\r\n\r\n  function addFeedback(state, action) {\r\n    const { button, payload } = action;\r\n    return {\r\n      ...state,\r\n      [button]: state[button] + payload,\r\n    };\r\n  }\r\n\r\n  function countPositiveFeedbackPercentage() {\r\n    return Math.round((100 * good) / countTotalFeedback());\r\n  }\r\n\r\n  function countTotalFeedback() {\r\n    return good + neutral + bad;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Section title={feedbackTitle}>\r\n        <FeedbackOptions\r\n          options={feedBakBtnOptions}\r\n          onLeaveFeedback={dispatch}\r\n        />\r\n      </Section>\r\n      <Section title={statisticsTitle}>\r\n        {totalFeedbackCount ? (\r\n          <Stats\r\n            good={good}\r\n            neutral={neutral}\r\n            bad={bad}\r\n            total={totalFeedbackCount}\r\n            positiveFeedback={positiveFeedbackPercentage}\r\n          />\r\n        ) : (\r\n          <NotificationMessage message={onEmptyFeedbackMsg} />\r\n        )}\r\n      </Section>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}